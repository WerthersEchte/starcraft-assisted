package de.fh_kiel.robotics.starcraft.exploit;

import java.util.HashMap;
import java.util.Map;

import bwapi.DefaultBWListener;
import bwapi.Game;
import bwapi.Mirror;
import bwapi.Player;
import bwapi.Position;
import bwapi.Race;
import bwapi.Unit;
import bwapi.UnitType;
import bwta.BWTA;
import bwta.BaseLocation;

public class Kern extends DefaultBWListener {

	private Mirror mirror = new Mirror();


    private static Game mSpiel;

    public static Game spiel(){
    	return mSpiel;
    }
    private static Player mSelbst;

    public static Player selbst(){
    	return mSelbst;
    }
    
    @Override
    public void onSendText(String aBefehl) {

    	if( aBefehl.contains("+") ){
    		++mDelay;
    	}
    	if( aBefehl.contains("-") ){
    		--mDelay;
    	}
    	
    	spiel().sendText("" + mDelay);
    }

    public void run() {
        mirror.getModule().setEventListener(this);
        mirror.startGame();
    }
    
    @Override
    public void onStart() {
        mSpiel = mirror.getGame();
        mSelbst = mSpiel.self();

        spiel().sendText("operation cwal");
        spiel().sendText("show me the money");
        spiel().sendText("black sheep wall");
        
        System.out.println("Karte: " + spiel().mapFileName());
        System.out.println("Analysiere Karte...");
        BWTA.readMap();
        BWTA.analyze();
        System.out.println("Kartendaten bereit!");
        
    	spiel().enableFlag(1);
    }

	private int mDelay = 5;
    Map<Integer, Integer> mSunkenAttack = new HashMap<Integer, Integer>();
    
	@Override
    public void onFrame() {
    	try{
    		
    		for( Unit vPSunken : selbst().getUnits() ){
    			if( vPSunken.getType() == UnitType.Zerg_Sunken_Colony ){
	    			if( vPSunken.isAttacking() && mSunkenAttack.containsKey(vPSunken.getID()) && mSunkenAttack.get(vPSunken.getID()) >= spiel().getFrameCount() + 50 ){
	    				mSunkenAttack.remove(vPSunken.getID());
	    				vPSunken.stop();
	    			} else if( vPSunken.isAttacking() && mSunkenAttack.containsKey(vPSunken.getID()) && mSunkenAttack.get(vPSunken.getID()) == spiel().getFrameCount() + mDelay ){
	    				for( Unit vEnemy : spiel().enemy().getUnits() ){
	    					if( vPSunken.canAttack( vEnemy ) && vPSunken.attack( vEnemy ) ){
	    						System.out.println("reattack");
	    						break;
	    					}
	    				}
	    			} else if( !vPSunken.isAttacking() ){
	    				for( Unit vVictem : spiel().getUnitsInRadius(vPSunken.getPosition(), vPSunken.getType().groundWeapon().maxRange()-10 )){
	    					if( vPSunken.canAttack( vVictem ) && vPSunken.attack( vVictem ) ){
	    						mSunkenAttack.put(vPSunken.getID(), spiel().getFrameCount());
	    						System.out.println("attack");
	    						break;
	    					}
	    				}
	    			}
    			}
    		}
    		
    	}catch( Exception vException ){
    		vException.printStackTrace();
    	}
    }

	public static void main(String[] args) {
        new Kern().run();
    }
}


































